# @package _global_

#thub.com/huggingface/lerobot/pull/134 for more details.
defaults:
  - override /policy: diffusion
  - override /env: ur5e-real

seed: 100000
dataset_repo_id: tlpss/micro-button-03

override_dataset_stats:
#   # TODO(rcadene, alexander-soare): should we remove image stats as well? do we use a pretrained vision model?
#   observation.image:
#     mean: [[[0.5]], [[0.5]], [[0.5]]]  # (c,1,1)
#     std: [[[0.5]], [[0.5]], [[0.5]]]  # (c,1,1)
#   # TODO(rcadene, alexander-soare): we override state and action stats to use the same as the pretrained model
#   # from the original codebase, but we should remove these and train our own pretrained model
#   observation.state:
#     min: [13.456424, 32.938293]
#     max: [496.14618, 510.9579]
#   action:
#     min: [12.0, 25.0]
#     max: [511.0, 511.0]

training:
  offline_steps: 80000
  online_steps: 0
  eval_freq: -1 
  save_freq: 5000
  log_freq: 250
  save_checkpoint: true

  batch_size: 64
  grad_clip_norm: 10
  lr: 1.0e-4
  lr_scheduler: cosine
  lr_warmup_steps: 500
  adam_betas: [0.95, 0.999]
  adam_eps: 1.0e-8
  adam_weight_decay: 1.0e-6
  online_steps_between_rollouts: 1

  delta_timestamps:
    observation.images.left-wrist.rgb: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    observation.images.base.rgb: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    observation.images.spectogram.rgb: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    observation.state: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1)]"
    action: "[i / ${fps} for i in range(1 - ${policy.n_obs_steps}, 1 - ${policy.n_obs_steps} + ${policy.horizon})]"

  # The original implementation doesn't sample frames for the last 7 steps,
  # which avoids excessive padding and leads to improved training results.
  drop_n_last_frames: 7  # ${policy.horizon} - ${policy.n_action_steps} - ${policy.n_obs_steps} + 1

eval:
  n_episodes: 50
  batch_size: 50

policy:
  name: diffusion

  # Input / output structure.
  n_obs_steps: 2
  horizon: 16
  n_action_steps: 8

  input_shapes:
    # TODO(rcadene, alexander-soare): add variables for height and width from the dataset/env?
    observation.images.left-wrist.rgb: [3, 256,256]
    observation.images.base.rgb: [3, 256,256]
    observation.images.spectogram.rgb: [3, 256,256]
    observation.state: ["${env.state_dim}"]
  output_shapes:
    action: ["${env.action_dim}"]

  # Normalization / Unnormalization
  input_normalization_modes:
    observation.images.left-wrist.rgb: min_max
    observation.images.base.rgb: min_max
    observation.images.spectogram.rgb: min_max
  output_normalization_modes:
    action: min_max

  # Architecture / modeling.
  # Vision backbone.
  vision_backbone: resnet18
  crop_shape: [84, 84]
  crop_is_random: True
  pretrained_backbone_weights: null
  use_group_norm: True
  spatial_softmax_num_keypoints: 32
  # Unet.
  down_dims: [512, 1024, 2048]
  kernel_size: 5
  n_groups: 8
  diffusion_step_embed_dim: 128
  use_film_scale_modulation: True
  # Noise scheduler.
  noise_scheduler_type: DDPM
  num_train_timesteps: 100
  beta_schedule: squaredcos_cap_v2
  beta_start: 0.0001
  beta_end: 0.02
  prediction_type: epsilon # epsilon / sample
  clip_sample: True
  clip_sample_range: 1.0

  # Inference
  num_inference_steps: 100

  # Loss computation
  do_mask_loss_for_padding: false



#### 

wandb:
  enable: true
  disable_artifact: true

# project name
hydra:
  job:
    name: ur5e-dp-micro-wrist-base-spectrogram
